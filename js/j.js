!function(h){"use strict";var n=function(t){this.defined="undefined"!=typeof localStorage};n.prototype={constructor:n,get:function(t,e){return localStorage.getItem(t)?localStorage.getItem(t):void 0!==e?e:null},has:function(t){return!!localStorage.getItem(t)},set:function(t,e,i){return"string"==typeof e&&(""===e?this.destroy(t):localStorage.setItem(t,e)),"function"!=typeof i||i()},destroy:function(t,e){return localStorage.removeItem(t),"function"!=typeof e||e()},clean:function(t){for(var e=localStorage.length-1;0<=e;e--)void 0===Array.indexOf&&-1!==localStorage.key(e).indexOf("garlic:")&&localStorage.removeItem(localStorage.key(e));return"function"!=typeof t||t()},clear:function(t){return localStorage.clear(),"function"!=typeof t||t()}};var r=function(t,e,i){this.init("garlic",t,e,i)};r.prototype={constructor:r,init:function(t,e,i,n){this.type=t,this.$element=h(e),this.options=this.getOptions(n),this.storage=i,this.path=this.options.getPath(this.$element)||this.getPath(),this.parentForm=this.$element.closest("form"),this.$element.addClass("garlic-auto-save"),this.expiresFlag=!!this.options.expires&&(this.$element.data("expires")?this.path:this.getPath(this.parentForm))+"_flag",this.$element.on(this.options.events.join("."+this.type+" "),!1,h.proxy(this.persist,this)),this.options.destroy&&h(this.parentForm).on("submit reset",!1,h.proxy(this.destroy,this)),this.retrieve()},getOptions:function(t){return h.extend({},h.fn[this.type].defaults,t,this.$element.data())},persist:function(){this.val!==this.getVal()&&(this.val=this.getVal(),this.options.expires&&this.storage.set(this.expiresFlag,((new Date).getTime()+1e3*this.options.expires).toString()),this.storage.set(this.path,this.getVal()),this.options.onPersist(this.$element,this.getVal()))},getVal:function(){return this.$element.is("input[type=checkbox]")?this.$element.prop("checked")?"checked":"unchecked":this.$element.val()},retrieve:function(){if(this.storage.has(this.path)){if(this.options.expires){var t=(new Date).getTime();if(this.storage.get(this.expiresFlag)<t.toString())return void this.storage.destroy(this.path);this.$element.attr("expires-in",Math.floor((parseInt(this.storage.get(this.expiresFlag))-t)/1e3))}var e=this.storage.get(this.path);return this.options.conflictManager.enabled&&this.detectConflict()?this.conflictManager():this.$element.is("input[type=radio], input[type=checkbox]")?"checked"===e||this.$element.val()===e?this.$element.attr("checked",!0):void("unchecked"===e&&this.$element.attr("checked",!1)):(this.$element.val(e),this.$element.trigger("input"),void this.options.onRetrieve(this.$element,e))}},detectConflict:function(){var t=this;if(this.$element.is("input[type=checkbox], input[type=radio]"))return!1;if(this.$element.val()&&this.storage.get(this.path)!==this.$element.val()){if(this.$element.is("select")){var e=!1;return this.$element.find("option").each(function(){0!==h(this).index()&&h(this).attr("selected")&&h(this).val()!==t.storage.get(this.path)&&(e=!0)}),e}return!0}return!1},conflictManager:function(){if("function"==typeof this.options.conflictManager.onConflictDetected&&!this.options.conflictManager.onConflictDetected(this.$element,this.storage.get(this.path)))return!1;this.options.conflictManager.garlicPriority?(this.$element.data("swap-data",this.$element.val()),this.$element.data("swap-state","garlic"),this.$element.val(this.storage.get(this.path))):(this.$element.data("swap-data",this.storage.get(this.path)),this.$element.data("swap-state","default")),this.swapHandler(),this.$element.addClass("garlic-conflict-detected"),this.$element.closest("input[type=submit]").attr("disabled",!0)},swapHandler:function(){var t=h(this.options.conflictManager.template);this.$element.after(t.text(this.options.conflictManager.message)),t.on("click",!1,h.proxy(this.swap,this))},swap:function(){var t=this.$element.data("swap-data");this.$element.data("swap-state","garlic"===this.$element.data("swap-state")?"default":"garlic"),this.$element.data("swap-data",this.$element.val()),h(this.$element).val(t)},destroy:function(){this.storage.destroy(this.path)},remove:function(){this.remove(),this.$element.is("input[type=radio], input[type=checkbox]")?h(this.$element).prop("checked",!1):this.$element.val("")},getPath:function(t){if(void 0===t&&(t=this.$element),this.options.getPath(t))return this.options.getPath(t);if(1!=t.length)return!1;for(var e="",i=t.is("input[type=checkbox]"),n=t;n.length;){var s=n[0],a=s.nodeName;if(!a)break;a=a.toLowerCase();var o=n.parent(),r=o.children(a);if(h(s).is("form, input, select, textarea")||i){if(a+=h(s).attr("name")?"."+h(s).attr("name"):"",1<r.length&&!h(s).is("input[type=radio]")&&(a+=":eq("+r.index(s)+")"),e=a+(e?">"+e:""),"form"==s.nodeName.toLowerCase())break;n=o}else n=o}return"garlic:"+document.domain+(this.options.domain?"*":window.location.pathname)+">"+e},getStorage:function(){return this.storage}},h.fn.garlic=function(s,t){var a=h.extend(!0,{},h.fn.garlic.defaults,s,this.data()),o=new n,e=!1;if(!o.defined)return!1;function i(t){var e=h(t),i=e.data("garlic"),n=h.extend({},a,e.data());if((void 0===n.storage||n.storage)&&"password"!==h(t).attr("type"))return i||e.data("garlic",i=new r(t,o,n)),"string"==typeof s&&"function"==typeof i[s]?i[s]():void 0}return this.each(function(){if(h(this).is("form"))h(this).find(a.inputs).each(function(){h(this).is(a.excluded)||(e=i(h(this)))});else if(h(this).is(a.inputs)){if(h(this).is(a.excluded))return;e=i(h(this))}}),"function"==typeof t?t():e},h.fn.garlic.Constructor=r,h.fn.garlic.defaults={destroy:!0,inputs:"input, textarea, select",excluded:'input[type="file"], input[type="hidden"]',events:["DOMAttrModified","textInput","input","change","click","keypress","paste","focus"],domain:!1,expires:!1,conflictManager:{enabled:!1,garlicPriority:!0,template:'<span class="garlic-swap"></span>',message:"This is your saved data. Click here to see default one",onConflictDetected:function(t,e){return!0}},getPath:function(t){},onRetrieve:function(t,e){},onPersist:function(t,e){}},h(window).on("load",function(){h('[data-persist="garlic"]').each(function(){h(this).garlic()})})}(window.jQuery||window.Zepto);
!function(u){function h(e,a){e&&window.console&&window.console.log&&window.console.log("jQuery-LABELAUTY: "+a)}u.fn.labelauty=function(e){var o=u.extend({development:!1,class:"labelauty",label:!0,separator:"|",checked_label:"Checked",unchecked_label:"Unchecked",minimum_width:!1,same_width:!0},e);return this.each(function(){var e,a,l,n=u(this),t=!0;if(!1===n.is(":checkbox")&&!1===n.is(":radio"))return this;if(n.addClass(o.class),e=n.attr("data-labelauty"),!0===(t=o.label)&&(null==e||0===e.length?((a=new Array)[0]=o.unchecked_label,a[1]=o.checked_label):2<(a=e.split(o.separator)).length?(t=!1,h(o.development,"There's more than two labels. LABELAUTY will not use labels.")):1===a.length&&h(o.development,"There's just one label. LABELAUTY will use this one for both cases.")),n.css({display:"none"}),n.removeAttr("data-labelauty"),null==(l=n.attr("id"))){var s=1+Math.floor(1024e3*Math.random());for(l="labelauty-"+s;0!==u(l).length;)l="labelauty-"+ ++s,h(o.development,"Holy crap, between 1024 thousand numbers, one raised a conflict. Trying again.");n.attr("id",l)}if(n.after(function(e,a,l){var n,t,s;null==a?t=s="":(t=a[0],s=null==a[1]?t:a[1]);n=1==l?'<label for="'+e+'"><span class="labelauty-unchecked-image"></span><span class="labelauty-unchecked">'+t+'</span><span class="labelauty-checked-image"></span><span class="labelauty-checked">'+s+"</span></label>":'<label for="'+e+'"><span class="labelauty-unchecked-image"></span><span class="labelauty-checked-image"></span></label>';return n}(l,a,t)),!1!==o.minimum_width&&n.next("label[for="+l+"]").css({"min-width":o.minimum_width}),0!=o.same_width&&1==o.label){var c=n.next("label[for="+l+"]"),i=c.find("span.labelauty-unchecked").width(),d=c.find("span.labelauty-checked").width();d<i?c.find("span.labelauty-checked").width(i):c.find("span.labelauty-unchecked").width(d)}})}}(jQuery);